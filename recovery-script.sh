#!/bin/bash

echo "🔧 Starting Giga Platform Recovery..."

# Remove corrupted lock file if it exists
rm -f pnpm-lock.yaml

# Create tsconfig.json
cat > tsconfig.json << 'TSEOF'
{
  "compilerOptions": {
    "target": "ES2022",
    "module": "ESNext",
    "moduleResolution": "node",
    "allowSyntheticDefaultImports": true,
    "esModuleInterop": true,
    "allowJs": true,
    "sourceMap": true,
    "strict": true,
    "noEmit": true,
    "baseUrl": ".",
    "paths": {
      "@shared/*": ["./shared/*"],
      "@platform/*": ["./services/*"]
    },
    "types": ["node"],
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true
  },
  "include": ["services/**/*", "shared/**/*"],
  "exclude": ["node_modules", "dist", "build"]
}
TSEOF

# Create .gitignore
cat > .gitignore << 'GITEOF'
# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage
.grunt

# Bower dependency directory
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons
build/Release

# Dependency directories
jspm_packages/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test
.env.production
.env.local
.env.development.local
.env.test.local
.env.production.local

# parcel-bundler cache
.cache
.parcel-cache

# Next.js build output
.next

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
public

# Storybook build outputs
.out
.storybook-out

# Temporary folders
tmp/
temp/

# Logs
logs
*.log

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# next.js build output
.next

# nuxt.js build output
.nuxt

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# Prisma
prisma/migrations/
!prisma/migrations/.gitkeep

# Build outputs
dist/
build/
*.tsbuildinfo

# Database
*.db
*.sqlite

# Uploads
uploads/
temp-uploads/

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# OS
.DS_Store
Thumbs.db

# Docker
.dockerignore
Dockerfile.prod

# Kubernetes
k8s/secrets/

# Terraform
*.tfstate
*.tfstate.*
.terraform/

# Local development
.env.local
.env.development.local
.env.test.local
.env.production.local

# Testing
coverage/
.nyc_output/
junit.xml

# Monitoring
.monitoring/

# Backup files
*.backup
*.bak
GITEOF

echo "✅ Created configuration files"

# Try to install dependencies with retry
echo "📦 Installing dependencies..."
for i in {1..3}; do
    echo "Attempt $i/3..."
    if pnpm install --no-frozen-lockfile; then
        echo "✅ Dependencies installed successfully"
        break
    else
        echo "❌ Attempt $i failed, retrying..."
        sleep 5
    fi
done

echo "🔧 Recovery script completed!"
echo ""
echo "Next steps:"
echo "1. Run: pnpm run build"
echo "2. Run: pnpm run type-check"
echo "3. Start services: pnpm run dev"
echo ""
echo "If you still have issues, try:"
echo "- Clear pnpm cache: pnpm store prune"
echo "- Remove node_modules: rm -rf node_modules && pnpm install"
