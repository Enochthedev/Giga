// Auth service database schema
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma-client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  phone             String?   @unique
  passwordHash      String
  firstName         String
  lastName          String
  avatar            String?
  dateOfBirth       DateTime?
  gender            Gender?
  isEmailVerified   Boolean   @default(false)
  isPhoneVerified   Boolean   @default(false)
  isActive          Boolean   @default(true)
  lastLoginAt       DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Multi-role relationships
  roles             UserRole[]
  activeRole        RoleName  @default(CUSTOMER)
  
  // Profile relationships
  customerProfile   CustomerProfile?
  vendorProfile     VendorProfile?
  driverProfile     DriverProfile?
  hostProfile       HostProfile?
  advertiserProfile AdvertiserProfile?

  // Auth tokens
  refreshTokens     RefreshToken[]
  emailVerificationTokens EmailVerificationToken[]
  passwordResetTokens     PasswordResetToken[]
  phoneVerificationCodes  PhoneVerificationCode[]
  passwordHistory   PasswordHistory[]

  // Audit logs
  adminAuditLogs    AuditLog[] @relation("AdminAuditLogs")
  targetAuditLogs   AuditLog[] @relation("TargetAuditLogs")

  // Token management
  tokenEvents       TokenEvent[]
  deviceSessions    DeviceSession[]
  blacklistedTokens BlacklistedToken[]
  securityEvents    SecurityEvent[]

  @@map("users")
}

model Role {
  id          String       @id @default(cuid())
  name        RoleName     @unique
  permissions Permission[]
  users       UserRole[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("roles")
}

model Permission {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  roles       Role[]
  createdAt   DateTime @default(now())

  @@map("permissions")
}

model UserRole {
  id     String @id @default(cuid())
  userId String
  roleId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  
  assignedAt DateTime @default(now())

  @@unique([userId, roleId])
  @@map("user_roles")
}

// Profile models for different roles
model CustomerProfile {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  preferences Json?
  addresses   Address[]
  loyaltyPoints Int     @default(0)
  membershipTier String @default("BRONZE") // BRONZE, SILVER, GOLD, PLATINUM
  totalOrders   Int     @default(0)
  totalSpent    Float   @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("customer_profiles")
}

model VendorProfile {
  id               String            @id @default(cuid())
  userId           String            @unique
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessName     String
  businessType     String
  description      String?
  logo             String?
  website          String?
  subscriptionTier SubscriptionTier  @default(BASIC)
  commissionRate   Float             @default(0.15)
  isVerified       Boolean           @default(false)
  rating           Float?
  totalSales       Float             @default(0)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@map("vendor_profiles")
}

model DriverProfile {
  id               String            @id @default(cuid())
  userId           String            @unique
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  licenseNumber    String            @unique
  vehicleInfo      Json
  isOnline         Boolean           @default(false)
  currentLocation  Json?
  rating           Float?
  totalRides       Int               @default(0)
  isVerified       Boolean           @default(false)
  subscriptionTier DriverTier        @default(BASIC)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@map("driver_profiles")
}

model HostProfile {
  id               String            @id @default(cuid())
  userId           String            @unique
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessName     String?
  hostType         HostType          @default(INDIVIDUAL)
  description      String?
  rating           Float?
  totalBookings    Int               @default(0)
  isVerified       Boolean           @default(false)
  subscriptionTier HostTier          @default(BASIC)
  responseRate     Float?
  responseTime     Int?              // in minutes
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@map("host_profiles")
}

model AdvertiserProfile {
  id               String            @id @default(cuid())
  userId           String            @unique
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyName      String
  industry         String
  website          String?
  totalSpend       Float             @default(0)
  totalCampaigns   Int               @default(0)
  isVerified       Boolean           @default(false)
  subscriptionTier SubscriptionTier  @default(BASIC)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@map("advertiser_profiles")
}

model Address {
  id                String          @id @default(cuid())
  customerProfileId String
  customerProfile   CustomerProfile @relation(fields: [customerProfileId], references: [id], onDelete: Cascade)
  label             String          // Home, Work, Other
  name              String?         // Recipient name
  address           String
  address2          String?         // Apartment, suite, etc.
  city              String
  state             String?
  zipCode           String?
  country           String
  phone             String?
  isDefault         Boolean         @default(false)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@map("addresses")
}

// Auth tokens and verification
model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  // Enhanced device tracking
  deviceId    String?
  sessionId   String?
  ipAddress   String?
  userAgent   String?

  @@index([userId])
  @@index([deviceId])
  @@index([sessionId])
  @@map("refresh_tokens")
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("email_verification_tokens")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("password_reset_tokens")
}

model PasswordHistory {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  passwordHash String
  createdAt    DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
  @@map("password_history")
}

model PhoneVerificationCode {
  id        String   @id @default(cuid())
  code      String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@unique([userId, code])
  @@map("phone_verification_codes")
}

// Audit logging for admin actions
model AuditLog {
  id           String   @id @default(cuid())
  action       String   // Action performed (e.g., 'VIEW_USER', 'UPDATE_USER_STATUS')
  adminUserId  String   // ID of admin who performed the action
  adminUser    User     @relation("AdminAuditLogs", fields: [adminUserId], references: [id], onDelete: Cascade)
  targetUserId String?  // ID of user being acted upon (if applicable)
  targetUser   User?    @relation("TargetAuditLogs", fields: [targetUserId], references: [id], onDelete: SetNull)
  details      Json     // Additional details about the action
  ipAddress    String?  // IP address of the admin
  userAgent    String?  // User agent of the admin
  createdAt    DateTime @default(now())

  @@index([adminUserId])
  @@index([targetUserId])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}

// Token event logging for analytics and security monitoring
model TokenEvent {
  id          String   @id @default(cuid())
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  eventType   String   // TOKEN_GENERATED, TOKEN_REFRESHED, SUSPICIOUS_ACTIVITY, etc.
  deviceId    String?
  sessionId   String?
  ipAddress   String?  // Hashed for privacy
  userAgent   String?
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())

  @@index([userId])
  @@index([eventType])
  @@index([deviceId])
  @@index([createdAt])
  @@map("token_events")
}

// Device session tracking
model DeviceSession {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  deviceId          String
  sessionId         String   @unique
  deviceFingerprint String
  ipAddress         String   // Hashed for privacy
  userAgent         String
  isActive          Boolean  @default(true)
  lastUsed          DateTime @default(now())
  createdAt         DateTime @default(now())
  expiresAt         DateTime

  @@unique([userId, deviceId])
  @@index([userId])
  @@index([deviceId])
  @@index([isActive])
  @@index([expiresAt])
  @@map("device_sessions")
}

// Token blacklist for revoked tokens
model BlacklistedToken {
  id        String   @id @default(cuid())
  tokenHash String   @unique // Hash of the token for privacy
  tokenType String   // access, refresh
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  reason    String   // logout, password_change, suspicious_activity, etc.
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([tokenHash])
  @@index([userId])
  @@index([expiresAt])
  @@map("blacklisted_tokens")
}

// Security event logging for monitoring and analytics
model SecurityEvent {
  id                String   @id @default(cuid())
  userId            String?
  user              User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  eventType         String   // LOGIN_ANALYSIS, TOKEN_REFRESH_ANALYSIS, SUSPICIOUS_ACTIVITY, etc.
  deviceId          String?
  ipAddress         String?  // Hashed for privacy
  deviceFingerprint String?
  riskScore         Int?
  riskLevel         String?  // low, medium, high, critical
  riskFactors       String[] // Array of risk factor types
  metadata          Json     @default("{}")
  createdAt         DateTime @default(now())

  @@index([userId])
  @@index([eventType])
  @@index([riskLevel])
  @@index([createdAt])
  @@map("security_events")
}

// Enums
enum RoleName {
  CUSTOMER
  VENDOR
  DRIVER
  HOST
  ADVERTISER
  ADMIN
}

enum SubscriptionTier {
  BASIC
  PRO
  ENTERPRISE
}

enum DriverTier {
  BASIC
  PRO
}

enum HostTier {
  BASIC
  PRO
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum HostType {
  INDIVIDUAL
  BUSINESS
}